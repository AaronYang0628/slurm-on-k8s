apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-ssh-keygen
  namespace: {{ .Release.Namespace | quote }}
spec:
  ttlSecondsAfterFinished: 1800
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: {{ include "slurm.serviceAccountName" . }}
      securityContext:
        runAsUser: 0
        runAsGroup: 0
        fsGroup: 0
      initContainers:
      - name: ssh-keygen
        image: {{ .Values.image.mirror.registry }}docker.io/library/debian:latest
        command: ["/bin/sh", "-c"]
        args:
          - |
            apt-get update && apt-get install -y openssh-client &&
            ssh-keygen -t rsa -b 4096 -N '' -f /keys/id_rsa &&
            cp /keys/id_rsa.pub /keys/authorized_keys
            {{- range .Values.auth.ssh.configmap.prefabPubKeys }}
                echo {{ . }} >> /keys/authorized_keys
            {{- end }}
        volumeMounts:
        - name: keys
          mountPath: /keys
      containers:
      - name: create-secret
        image: {{ .Values.image.mirror.registry }}docker.io/bitnami/kubectl:1.28-debian-11
        command: ["/bin/sh", "-c"]
        args:
          - |
            if kubectl -n {{ .Release.Namespace }} get secret {{ .Values.auth.ssh.secret.name }}; then
              echo "SSH keys already exist. Skipping key generation.";
            else
              kubectl -n {{ .Release.Namespace }} create secret generic {{ .Values.auth.ssh.secret.name }} \
              --from-file=id_rsa=/keys/id_rsa \
              --from-file=id_rsa.pub=/keys/id_rsa.pub \
              --from-file=authorized_keys=/keys/id_rsa.pub
            fi
            kubectl -n {{ .Release.Namespace }} create configmap {{ .Values.auth.ssh.configmap.name }} \
              --from-file=authorized_keys=/keys/authorized_keys
        volumeMounts:
        - name: keys
          mountPath: /keys
      restartPolicy: OnFailure
      volumes:
      - name: keys
        emptyDir: {}
